name: ci

on:
  - push

jobs:
  unit:
    name: Pulumi Preview
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 5
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          submodules: recursive

      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Test with Gradle
        run: ./gradlew test

  lint:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 5
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          submodules: recursive

      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Lint with Gradle
        run: ./gradlew spotlessCheck

  build:
    name: Build and Push baemincrypto
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 5
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: app
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/taehoio/baemincrypto:${{ github.sha }}

  build-gateway:
    name: Build and Push grpcgateway
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Setup
        run: |
          git config --global url."https://${{ secrets.GH_ACCESS_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build golang executables
        run: |
          make build-grpcgateway

      - name: Build and push
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: grpcgateway
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/taehoio/baemincrypto-grpcgateway:${{ github.sha }}

  deploy-staging:
    name: Deploy to staging
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    needs: [lint, unit, build, build-gateway]
    steps:
      - name: Create deployment
        run: |
          curl --silent --show-error --fail \
            -X POST "https://api.github.com/repos/$GITHUB_REPOSITORY/deployments" \
            -H "Authorization: token ${{ secrets.GH_ACCESS_TOKEN }}" \
            -H "Content-Type: text/json; charset=utf-8" \
            -d @- <<EOF
          {
            "ref": "main",
            "environment": "staging",
            "required_contexts": [],
            "auto_merge": false
          }
          EOF
